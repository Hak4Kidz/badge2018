/* Hello World Example

   This example code is in the Public Domain (or CC0 licensed, at your option.)

   Unless required by applicable law or agreed to in writing, this
   software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
   CONDITIONS OF ANY KIND, either express or implied.
*/
#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_wifi.h"
#include "esp_system.h"
#include "esp_event.h"
#include "esp_event_loop.h"
#include "nvs_flash.h"
#include "esp_log.h"
#include "esp_spi_flash.h"
#include "lwip/udp.h"

#include "i2c.h"
#include "is31fl3736.h"
#include "touch.h"

static const char* TAG = "CPV2018";

esp_err_t event_handler(void *ctx, system_event_t *event)
{
    return ESP_OK;
}

void udp_pkt_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, uint16_t port)
{
	if (p && p->len >= 1) {
		i2c_set_touch_electrodes(*(uint8_t *)(p->payload + 0));
	}

	if (p) {
		pbuf_free(p);
	}
}

void te_udp_init()
{
    struct udp_pcb *u = udp_new();
    udp_bind(u, IP_ADDR_ANY, 28500);
    udp_recv(u, udp_pkt_callback, NULL);
}

void app_main()
{
	ESP_LOGI(TAG, "Booting the ESP32 / CPV 2018 Badge...");

    /* Print chip information */
    esp_chip_info_t chip_info;
    esp_chip_info(&chip_info);
    printf("This is ESP32 chip with %d CPU cores, WiFi%s%s, ",
            chip_info.cores,
            (chip_info.features & CHIP_FEATURE_BT) ? "/BT" : "",
            (chip_info.features & CHIP_FEATURE_BLE) ? "/BLE" : "");

    printf("silicon revision %d, ", chip_info.revision);

    printf("%dMB %s flash\n", spi_flash_get_chip_size() / (1024 * 1024),
            (chip_info.features & CHIP_FEATURE_EMB_FLASH) ? "embedded" : "external");

    ESP_LOGI(TAG, "Initializing nvs...");
    nvs_flash_init();

    ESP_LOGI(TAG, "Initializing touch...");
    tp_init();

    ESP_LOGI(TAG, "Initializing I2C...");
    i2c_init();

    ESP_LOGI(TAG, "Initializing TCP/IP...");
    tcpip_adapter_init();

    ESP_LOGI(TAG, "Initializing event loop...");
    ESP_ERROR_CHECK(esp_event_loop_init(event_handler, NULL));

    ESP_LOGI(TAG, "Initializing WiFi...");
    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK( esp_wifi_init(&cfg) );
    ESP_ERROR_CHECK( esp_wifi_set_storage(WIFI_STORAGE_RAM) );
    ESP_ERROR_CHECK( esp_wifi_set_mode(WIFI_MODE_STA) );
    wifi_config_t sta_config = {
        .sta = {
            .ssid = "DEFCON-Open",
            .password = "",
            .bssid_set = false
        }
    };

    ESP_ERROR_CHECK( esp_wifi_set_config(WIFI_IF_STA, &sta_config) );
    ESP_ERROR_CHECK( esp_wifi_start() );
    ESP_ERROR_CHECK( esp_wifi_set_auto_connect(true) );
    ESP_ERROR_CHECK( esp_wifi_connect() );

    te_udp_init();

    is31fl3736_handle_t leds = iot_is31fl3736_create(0, 0, 121);
    for (int x = 0; x < IS31FL3736_CSX_MAX; x++) {
    	for (int y = 0; y < IS31FL3736_SWY_MAX; y++) {
    		iot_is31fl3736_set_pwm_duty_matrix(leds, 1 << x, IS31FL3736_CH_BIT(y), 0xFF);
    		vTaskDelay(100 / portTICK_PERIOD_MS);
    	}
    }

    for (int y = 0; y < IS31FL3736_SWY_MAX; y++) {
        iot_is31fl3736_set_pwm_duty_matrix(leds, 0xffff, IS31FL3736_CH_BIT(y), 0xFF);
    }

    for (int i = 1000; i >= 0; i--) {
        printf("Restarting in %d seconds...\n", i);
        vTaskDelay(1000 / portTICK_PERIOD_MS);
    }
    printf("Restarting now.\n");
    fflush(stdout);
    esp_restart();
}
